PARSER_BEGIN(Karloff)
import java.io.*;
public class Karloff {

  public static void main(String args[]) throws ParseException,IOException {
    
    Karloff parser = new Karloff(new FileInputStream(args[0]));
    parser.Karloff();
  }

}

PARSER_END(Karloff)

SKIP :
{
  " "
| "\t"
| "\n"
| "\r"
}

TOKEN :
{
  <MAIN: "main">
| <FUNC: "func">
| <ACHAVES: "{">
| <FCHAVES: "}">
| <APARENT: "(">
| <FPARENT: ")">
| <NEW: "newVar">
| <TIPO: "int"|"bool">
| <VOID: "void">
| <IF: "if">
| <THEN: "then">
| <WHILE: "while">
| <REPEAT: "repeat">
| <UNTIL: "until">
| <RETURN: "return">
| <SOUT: "System.output">
| <TRUE: "true">
| <FALSE: "false">
}

TOKEN :
{
 <NUM: ["1"-"9"](["0"-"9"])+>
|<ID: ["a"-"z","A"-"Z"] (["a"-"z","A"-"Z","0"-"9"])* ("_"["a"-"z","A"-"Z","0"-"9"])*>
|<OP: "+" | "-" | "*" | "/" | "&" | "|" | "<" | ">" | "==">
|<NUMLIT: <NUM>("."<NUM>)? ("E" ("+" | "-") <NUM>)?>
}

void Karloff () :
{}
{ 

  Main() 
  Func()
  <EOF> 
}
	

void Main ():
{}
{
 <VOID> <MAIN> <ACHAVES> 
 
 VarDecl()
 SeqComandos()

 <FCHAVES>

}


void VarDecl ():
{}
{
	(<NEW> <TIPO> <ID> ";")*
}


void exp():
{}
{
	(<APARENT> exp() <OP> exp() <FPARENT>)
	| fator()
}


void listaexp():
{}
{
	exp() (exp() ";" exp())*   
}


void fator():
{}
{
	(<ID> (<APARENT> listaexp() <FPARENT>)?)
	| <NUMLIT> | <TRUE> | <FALSE> 
}


void comando():
{}
{
	(<ID> comandoR())
	|(<IF> <APARENT> exp() <FPARENT> <THEN> <ACHAVES> SeqComandos() <FCHAVES> ";")
	|(<WHILE> <APARENT> exp() <FPARENT> <ACHAVES> SeqComandos() <FCHAVES> ";")
	|(<REPEAT> <ACHAVES> SeqComandos() <FCHAVES> <UNTIL> <APARENT> exp() <FPARENT> ";")
	|(<RETURN> exp() ";")
	|(<SOUT> <APARENT> exp() <FPARENT> ";")
}

void comandoR():
{}
{
  ("=" exp() ";") | (<APARENT> (listaexp())? <FPARENT> ";")
}

void SeqComandos ():
{}
{
	(comando())*
}

void listarg ():
{}
{
  (<TIPO> <ID> ",")* <TIPO> <ID>
}

void Func ():
{}
{
  (<FUNC> <TIPO> <ID> <APARENT> (listarg())? <FPARENT> <ACHAVES> VarDecl() SeqComandos() <FCHAVES>)*
}
