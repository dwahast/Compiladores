PARSER_BEGIN(Karloff)
import java.io.*;
public class Karloff {

  public static void main(String args[]) throws ParseException,IOException {
    
    Karloff parser = new Karloff(new FileInputStream(args[0]));
    parser.Karloff();
  }

}

PARSER_END(Karloff)

SKIP :
{
  " "
| "\t"
| "\n"
| "\r"
}

TOKEN :
{
  <MAIN: "main">
| <ACHAVES: "{">
| <FCHAVES: "}">
| <NEW: "newVar">
| <TIPO: "int"|"bool">
| <VOID: "void">
}

TOKEN :
{
 <NUM: ["1"-"9"](["0"-"9"])+>
|<ID: ["a"-"z","A"-"Z"] (["a"-"z","A"-"Z","0"-"9"])* ("_"["a"-"z","A"-"Z","0"-"9"])*>
|<OP: "+" | "-" | "*" | "/" | "&" | "|" | "<" | ">" | "==">
|<NUMLIT: <NUM>("."<NUM>)? ("E" ("+" | "-") <NUM>)?>
}

void Karloff () :
{}
{ 

  Main() 
//Func()?
  <EOF> 
}
	

void Main ():
{}
{
 <VOID> <MAIN> <ACHAVES> 
 
 VarDecl()
 SeqComandos()

 <FCHAVES>

}


void VarDecl ():
{}
{
	(<NEW> <TIPO> <ID> ";")*
}


void exp():
{}
{
	("(" exp() <OP> exp() ")")
	| fator()
}


void listaexp():
{}
{
	exp() listaexpR()
}

void listaexpR():
{}
{
	("," exp() listaexpR() )?
}

void fator():
{}
{
	(<ID> fatNR())
	|<NUMLIT> | "true" | "false" 
}

void fatNR():
{}
{
	("(" (listaexp())?  ")")?
}


void comando():
{}
{
	(<ID> comandoNR())
  	|("if" "(" exp() ")" "{" SeqComandos() "}" ";")
  	|(<WHILE> "(" exp() ")" <DO> <ACHAVES> SeqComandos() <FCHAVES> <PONTOVIR>)
  	|(<DO> <ACHAVES> SeqComandos() <FCHAVES> <WHILE> "(" exp() ")" <PONTOVIR>)
  	|(<RETURN> exp() <PONTOVIR>)
  	|(<PRINT> "(" exp() ")" <PONTOVIR>)
}



void SeqComandos ():
{}
{
	(comando())*
}





