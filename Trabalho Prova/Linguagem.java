/* Generated By:JavaCC: Do not edit this line. Linguagem.java */
import java.io.*;

class Exp {}
class Num extends Exp{
  int x;
  Num(int x){this.x=x;}
        public String toString(){return this.x + "";}
}

class ID extends Exp{
        String id;
        ID(String id){this.id=id;}
        public String toString(){return this.id;}
}

class BinOp extends Exp{
        String op;
        Exp e1, e2;
        BinOp(Exp e1, Exp e2, String op){this.op = op; this.e1=e1; this.e2=e2;}
        public String toString(){
                return "(" + e1.toString() +
                 op + e2.toString() + ")";}
}

class Command {}
class Seq extends Command {
        Command c1, c2;
        Seq(Command c1, Command c2) {this.c1=c1; this.c2=c2;}
        public String toString(){
                if (c1 == null) return "";
                if (c2 == null) return c1.toString() + "\u005cn";
                return c1.toString() + "\u005cn" + c2.toString();
        }
}

class Atrib extends Command {
        String id;
        Exp e;
        Atrib(String id, Exp e){this.id=id;this.e=e;}
        public String toString(){
                return "\u005ct" + id + "=" + e.toString();
        }
}

class Print extends Command {
        Exp e;
        Print(Exp e){this.e=e;}
        public String toString(){
                return "\u005ct" + "print("+ e.toString() + ")";
        }
}


class VarDecl{}

class SingleVarDecl extends VarDecl{
        String id, tipo;
        SingleVarDecl(String id, String tipo){this.id=id; this.tipo=tipo;}
        public String toString() {
                return "\u005ct" + id + "=" + tipo + "()";
        }
}

class SeqVarDecl extends VarDecl{
        VarDecl v, vs;
        SeqVarDecl(VarDecl v, VarDecl vs) {this.v=v; this.vs=vs;}
        public String toString(){
                if (v == null) return "";
                if (vs == null) return v.toString() + "\u005cn";
                return v.toString() + "\u005cn" + vs.toString();
        }
}

class Program{
        Command cs;
        VarDecl vars;
        Program(VarDecl vars, Command cs) {this.cs = cs; this.vars=vars;}
        public String toString(){
                return "def main: \u005cn" +
                        //vars.toString() + 
                        cs.toString() + "";
        }
}

public class Linguagem implements LinguagemConstants {
  public static void main(String args[]) throws ParseException,IOException {
    Linguagem parser = new Linguagem(new FileInputStream(args[0]));
    Program p = parser.Program();
    printer(p);
  }
  static void printer (Program p){System.out.println(p);}

  static final public Exp E() throws ParseException {
 Exp e=null;Token t;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case NUM:
      t = jj_consume_token(NUM);
             e= new Num(Integer.parseInt(t.image));
      break;
    case ID:
      t = jj_consume_token(ID);
                   e= new ID(t.image);
      break;
    case APARENTESES:
      e = BinOp();
      break;
    default:
      jj_la1[0] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
   {if (true) return e;}
    throw new Error("Missing return statement in function");
  }

  static final public BinOp BinOp() throws ParseException {
 Exp e1, e2; Token t;
    jj_consume_token(APARENTESES);
    e1 = E();
    t = jj_consume_token(BINOP);
    e2 = E();
    jj_consume_token(FPARENTESES);
         {if (true) return new BinOp(e1, e2, t.image);}
    throw new Error("Missing return statement in function");
  }

  static final public Command Command() throws ParseException {
 Command c;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ID:
      c = Atrib();
      break;
    case PRINT:
      c = Print();
      break;
    default:
      jj_la1[1] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    jj_consume_token(PONTOEVIRGULA);
         {if (true) return c;}
    throw new Error("Missing return statement in function");
  }

  static final public Seq Seq() throws ParseException {
 Command c1=null, c2=null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case PRINT:
    case ID:
      c1 = Command();
      c2 = Seq();
      break;
    default:
      jj_la1[2] = jj_gen;
      ;
    }
         {if (true) return new Seq(c1, c2);}
    throw new Error("Missing return statement in function");
  }

  static final public Atrib Atrib() throws ParseException {
 Token t; Exp e;
    t = jj_consume_token(ID);
    jj_consume_token(ATRIB);
    e = E();
         {if (true) return new Atrib(t.image, e);}
    throw new Error("Missing return statement in function");
  }

  static final public Print Print() throws ParseException {
 Exp e;
    jj_consume_token(PRINT);
    e = E();
         {if (true) return new Print(e);}
    throw new Error("Missing return statement in function");
  }

  static final public Program Program() throws ParseException {
 VarDecl vars; Command cs;
    jj_consume_token(MAIN);
    jj_consume_token(APARENTESES);
    jj_consume_token(FPARENTESES);
    jj_consume_token(ACHAVES);
    vars = SeqVarDecl();
    cs = Seq();
    jj_consume_token(FCHAVES);
         {if (true) return new Program(vars, cs);}
    throw new Error("Missing return statement in function");
  }

  static final public SingleVarDecl SingleVarDecl() throws ParseException {
 Token id, tipo;
    jj_consume_token(VAR);
    id = jj_consume_token(ID);
    jj_consume_token(DOISPONTOS);
    tipo = jj_consume_token(TIPO);
    jj_consume_token(PONTOEVIRGULA);
         {if (true) return new SingleVarDecl(id.image, tipo.image);}
    throw new Error("Missing return statement in function");
  }

  static final public SeqVarDecl SeqVarDecl() throws ParseException {
 VarDecl v=null; VarDecl vs=null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case VAR:
      v = SingleVarDecl();
      vs = SeqVarDecl();
      break;
    default:
      jj_la1[3] = jj_gen;
      ;
    }
         {if (true) return new SeqVarDecl(v, vs);}
    throw new Error("Missing return statement in function");
  }

  static private boolean jj_initialized_once = false;
  /** Generated Token Manager. */
  static public LinguagemTokenManager token_source;
  static SimpleCharStream jj_input_stream;
  /** Current token. */
  static public Token token;
  /** Next token. */
  static public Token jj_nt;
  static private int jj_ntk;
  static private int jj_gen;
  static final private int[] jj_la1 = new int[4];
  static private int[] jj_la1_0;
  static {
      jj_la1_init_0();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x21040,0x28000,0x28000,0x200,};
   }

  /** Constructor with InputStream. */
  public Linguagem(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public Linguagem(java.io.InputStream stream, String encoding) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser.  ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new LinguagemTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 4; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 4; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public Linguagem(java.io.Reader stream) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new LinguagemTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 4; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 4; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public Linguagem(LinguagemTokenManager tm) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 4; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(LinguagemTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 4; i++) jj_la1[i] = -1;
  }

  static private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }


/** Get the next Token. */
  static final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  static final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  static private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  static private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  static private int[] jj_expentry;
  static private int jj_kind = -1;

  /** Generate ParseException. */
  static public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[20];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 4; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 20; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  static final public void enable_tracing() {
  }

  /** Disable tracing. */
  static final public void disable_tracing() {
  }

}
