PARSER_BEGIN(Linguagem)
import java.io.*;

class Exp {}
class Num extends Exp{
  int x;
  Num(int x){this.x=x;}
	public String toString(){return this.x + "";}
}

class ID extends Exp{
	String id;
	ID(String id){this.id=id;}
	public String toString(){return this.id;}
}

class BinOp extends Exp{
	String op;
	Exp e1, e2;
	BinOp(Exp e1, Exp e2, String op){this.op = op; this.e1=e1; this.e2=e2;}
	public String toString(){
		return "(" + e1.toString() +
		 op + e2.toString() + ")";}
}

class Command {}
class Seq extends Command {
	Command c1, c2;
	Seq(Command c1, Command c2) {this.c1=c1; this.c2=c2;}
	public String toString(){
		if (c1 == null) return "";
		if (c2 == null) return c1.toString() + "\n";
		return c1.toString() + "\n" + c2.toString();
	}
}

class Atrib extends Command {	
	String id;
	Exp e;
	Atrib(String id, Exp e){this.id=id;this.e=e;}
	public String toString(){ 
		return "\t" + id + "=" + e.toString();
	}
}

class Print extends Command {
	Exp e;
	Print(Exp e){this.e=e;}
	public String toString(){
		return "\t" + "print("+ e.toString() + ")";
	}
}


class VarDecl{}

class SingleVarDecl extends VarDecl{
	String id, tipo;
	SingleVarDecl(String id, String tipo){this.id=id; this.tipo=tipo;}
	public String toString() {
		return "\t" + id + "=" + tipo + "()";
	}
}

class SeqVarDecl extends VarDecl{
	VarDecl v, vs;
	SeqVarDecl(VarDecl v, VarDecl vs) {this.v=v; this.vs=vs;}
	public String toString(){
		if (v == null) return "";
		if (vs == null) return v.toString() + "\n";
		return v.toString() + "\n" + vs.toString();
	}
}

class Program{
	Command cs;
	VarDecl vars;
	Program(VarDecl vars, Command cs) {this.cs = cs; this.vars=vars;}
	public String toString(){
		return "def main: \n" + 
			//vars.toString() + 
			cs.toString() + "";
	}
}

public class Linguagem {
  public static void main(String args[]) throws ParseException,IOException {
    Linguagem parser = new Linguagem(new FileInputStream(args[0]));
    Program p = parser.Program();
    printer(p);
  }
  static void printer (Program p){System.out.println(p);}
}


PARSER_END(Linguagem)

SKIP :
{
  " "
| "\t"
| "\n"
| "\r"
}

TOKEN :
{
   <#LETRA: (["a"-"z"]|["A"-"Z"])>
  | < NUM: ["0"-"9"](["0"-"9"])* >
  | < PONTOEVIRGULA: ";">
  | < DOISPONTOS: ":">
  | < VAR: "var">
  | < ACHAVES: "{">
  | < FCHAVES: "}">
  | < APARENTESES: "(">
  | < FPARENTESES: ")">
  | < MAIN: "main">
  | < PRINT: "print">
  | < TIPO: "int">
  | <ID: ["a"-"z","A"-"Z"] (["a"-"z","A"-"Z","0"-"9"])* ("_"["a"-"z","A"-"Z","0"-"9"])*>
  | < BINOP: "+"|"-"|"/"|"*">
  | < ATRIB: ":=">
}

Exp E():
{Exp e=null;Token t;}
{ 
  ((t=<NUM> {e= new Num(Integer.parseInt(t.image));} )
	| (t=<ID> {e= new ID(t.image);})
	| (e=BinOp())
  )
  {return e;}
}

BinOp BinOp():
{Exp e1, e2; Token t;}
{
	<APARENTESES> e1=E()  t=<BINOP> e2=E() <FPARENTESES>
	{return new BinOp(e1, e2, t.image);}
}


Command Command():
{Command c;}
{
	(
		  (c=Atrib())
		| (c=Print())
	) <PONTOEVIRGULA>
	{return c;}
}

Seq Seq():
{Command c1=null, c2=null;}
{
	(c1=Command() c2=Seq())?
	{return new Seq(c1, c2);}
}

Atrib Atrib():
{Token t; Exp e;}
{
	t=<ID> <ATRIB> (e=E())
	{return new Atrib(t.image, e);}
}

Print Print():
{Exp e;}
{
	<PRINT> (e=E())
	{return new Print(e);}
}

Program Program():
{VarDecl vars; Command cs;}
{
	<MAIN> <APARENTESES> <FPARENTESES> <ACHAVES>
		vars=SeqVarDecl()
		cs=Seq()
	<FCHAVES>
	{return new Program(vars, cs);}
}

SingleVarDecl SingleVarDecl():
{Token id, tipo;}
{
	<VAR> id=<ID> <DOISPONTOS> tipo=<TIPO> <PONTOEVIRGULA>
	{return new SingleVarDecl(id.image, tipo.image);}
}

SeqVarDecl SeqVarDecl():
{VarDecl v=null; VarDecl vs=null;}
{
	(v=SingleVarDecl() vs=SeqVarDecl())?
	{return new SeqVarDecl(v, vs);}
}
